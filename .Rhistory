usa
USA
Usa
rnvd3
install.packages("rPresentation")
install.packages("caret")
?predict
?matlines
?glm
seq(0, 1, length=10)
seq(0, 1, length=11)
install.packages("boot")
install.packages("tree")
?partition.tree
library("tree", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
?partition.tree
install.packages("rgl", "rMaps")
install.packages("rgl")
install_github('ramnathv/rCharts@dev')
library(devtools)
install_github('ramnathv/rCharts@dev')
install_github('ramnathv/rMaps')
setwd("/home/lauprebel/R/Data/Coursera/05.ReproducibleResearch/Peer Assessment 2")
setwd("/home/lauprebel/R/Data/Coursera/06.StatisticalInference/CourseProject")
setwd("/home/lauprebel/R/Data")
dir()
setwd("/home/lauprebel/R/Data/RGraphicsCookbook")
library(MASS)
library(ggplot2)
library(scales)
ggplot(Animals, aes(x=body, y=brain, label=rownames(Animals))) +
geom_text(size=3) +
annotation_logticks() +
scale_x_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x)))
ggplot(Animals, aes(x=body, y=brain, label=rownames(Animals))) +
geom_text(size=3) +
annotation_logticks() +
scale_x_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x))
minor_breaks=log10(5) + -2:5) +
scale_y_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x)),
minor_breaks=log10(5) + -1:3) +
coord_fixed() +
theme_bw()
ggplot(Animals, aes(x=body, y=brain, label=rownames(Animals))) +
geom_text(size=3) +
annotation_logticks() +
scale_x_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x))
minor_breaks=log10(5) + -2:5)
ggplot(Animals, aes(x=body, y=brain, label=rownames(Animals))) +
geom_text(size=3) +
annotation_logticks() +
scale_x_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x))) +
scale_y_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x)))
ggplot(Animals, aes(x=body, y=brain, label=rownames(Animals))) +
geom_text(size=3) +
annotation_logticks() +
scale_x_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x)),
minor_breaks=log10(5) + -2:5) +
scale_y_log10(breaks=trans_breaks("log10", function(x) 10^x),
labels=trans_format("log10", math_format(10^.x)),
minor_breaks=log10(5) + -1:3) +
coord_fixed() +
theme_bw()
library(gcookbook)
wind
ggplot(wind, aes(x=DirCat, fill=SpeedCat)) +
geom_histogram(binwidth=15, origin=-7.5) +
coord_polar() +
scale_x_continuous(limits=c(0, 360))
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(binwidth=15, origin=-7.5, colour="black", size=.25) +
guides(fill=guide_legend(reverse=TRUE)) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer()
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(stat="identity", binwidth=15, origin=-7.5, colour="black", size=.25) +
guides(fill=guide_legend(reverse=TRUE)) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer()
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(stat="identity", binwidth=15, origin=-7.5, colour="black", size=.25) +
guides(fill=guide_legend(reverse=TRUE)) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer(palette="Blues")
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(stat="identity", binwidth=15, origin=-7.5, colour="black", size=.25) +
guides(fill=guide_legend(reverse=TRUE)) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer()
ggplot(wind, aes(x=DirCat, fill=SpeedCat)) +
geom_histogram(binwidth=15, origin=-7.5) +
coord_polar() +
scale_x_continuous(limits=c(0, 360))
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(stat="identity", binwidth=15, origin=-7.5, colour="black", size=.25) +
#guides(fill=guide_legend(reverse=TRUE)) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer()
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(stat="identity", binwidth=15, origin=-7.5, colour="black", size=.25) +
guide(fill=guide_legend(reverse=TRUE)) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer()
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(stat="identity", binwidth=15, origin=-7.5, colour="black", size=.25) +
guides(fill=guide_legend()) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer()
ggplot(wind, aes(x=DirCat, y=SpeedCat)) +
geom_histogram(stat="identity", binwidth=15, origin=-7.5, colour="black", size=.25) +
guides(fill=guide_legend(reverse=T)) +
coord_polar() +
scale_x_continuous(limits=c(0,360), breaks=seq(0,360,by=45),
minor_breaks=seq(0,360,by=15)) +
scale_fill_brewer()
md <- data.frame(deaths=as.numeric(mdeaths),
month=as.numeric(cycle(mdeaths)))
?cycle
,f
md
mdeaths
library(plyr)
md <- ddply(md, "month", summarise, deaths = mean(deaths))
md
p <- ggplot(md, aes(x=month, y=deaths)) + geom_line() +
scale_x_continuous(breaks=1:12)
p + coord_polar()
p + coord_polar() + ylim(0, max(md$deaths))
p + coord_polar() + ylim(0, max(md$deaths)) + xlim(0,12)
mdx <- md[md$month==12,]
mdx$month <- 0
mdnew <- rbind(mdx, md)
p %+% mdnew + coord_polar() + ylim(0, max(md$deaths))
str(economics)
ggplot(economics, aes(x=date, y=psavert)) + geom_line()
ggplot(economics, aes(x=date, y=uempmed)) + geom_line()
econ <- subset(economics, date >= as.Date("1992-05-01") &
date < as.Date("1993-06-01"))
p <- ggplot(econ, aes(x=date, y=psavert)) + geom_line()
p
datebreaks <- seq(as.Date("1992-06-01"), as.Date("1993-06-01"), by="2 month")
p + scale_x_date(breaks=datebreaks) +
theme(axis.text.x = element_text(angle=30, hjust=1))
library(scales)
p + scale_x_date(breaks=datebreaks, labels=date_format("%Y %b")) +
theme(axis.text.x = element_text(angle=30, hjust=1))
www <- data.frame(minute = as.numeric(time(WWWusage)),
users = as.numeric(WWWusage))
www
head(www)
head(WWWusage)
WWWusage
timeHM_formatter <- function(x) {
h <- floor(x/60)
m <- floor(x %% 60)
lab <- sprintf("%d:%02d", h, m)
return(lab)
}
ggplot(www, aes(x=minute, y=users)) + geom_line()
ggplot(www, aes(x=minute, y=users)) + geom_line() +
scale_x_continuous(name="time", breaks=seq(0,100,by=10),
labels=timeHM_formatter)
1.96*30
qnorm(0.025, 0.975)
qnorm(c(0.025, 0.975))
1.96/3
.653333*30
setwd("../")
getwd
getwd()
setwd(".../")
setwd("../")
getwd()
setwd("./Data")
getwd()
baseline <- c(140, 138, 150, 148, 135)
week2 <- c(132, 135, 151, 146, 130)
subject <- c(1, 2, 3, 4, 5)
bp <- cbind(subject, baseline, week2)
bp
t.test(bp$baseline, bp$subject, paired=T, var.equal=F)
bp$baseline
bp
bp <- data.frame(subject, baseline, week2)
bp
t.test(bp$baseline, bp$subject, paired=T, var.equal=F)
t.test(bp$baseline, bp$subject, var.equal=F)
?t.test
t.test(bp$baseline, bp$subject, alternative="two.sided, paired=T, var.equal=F)
)
)
t.test(bp$baseline, bp$subject, alternative="two.sided", paired=T, var.equal=F)
mu0 <- mean(baseline)
mua <- mean(week2)
mu0 - mua
sd0 <- sd(baseline)
sda <- sd(week2)
ts <- (mua - mu0)/(sda/sqrt(5))
ts
mu0 <- 0
mua <- .01
sigma <- .04
n <- 100
z <- .95
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=F)
mua <- -.01
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=F)
?pnorm
mua <- .01
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=T)
z <- qnorm(.95)
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=F)
?power.t.test
power.t.test(power=.9, delta=.01, sd=sigma, type="paired", alt="one.sided")
m1 <- mean(baseline); m2 <- mean(week2)
n1 <- n2 <- 5
s <- sd(baseline)
se <- s * sqrt(1/n1 + 1/n2)
ts <- (m2 - m1) /se
pv <- 2 * pnorm(-abs(ts))
pv
s
ts
pnorm(-abs(ts))
t.test(bp$baseline, bp$week2)
t.test(bp$baseline, bp$week2, paired=T)
t.test(bp$baseline, bp$week2, paired=T, var.equal=F)
t.test(bp$baseline, bp$week2, paired=T, var.equal=F, alternative="two.sided")
?t.test
pbinom(3, prob=.5, size=4, lower.tail=F)
pbinom(2, prob=.5, size=4, lower.tail=F)
10/1787
ppois(1.78, 5, lower.tail=F)
ppois(.005595971, .01, lower.tail=F)
1/100
ppois(.01, .005595971, lower.tail=F)
ppois(.005595971, .01)
ppois((10/1787), (1/100), lower.tail=F)
?ppois
ppois((10/1787), (1/100), lower.tail=T)
hos <- 10*100/1787
ben <- 1*100/100
hos
ben
ppois(hos, ben, lower.tail=F)
ppois(hos, ben, lower.tail=T)
ppois(9, 1.787, lower.tail=F)
ppois(9, 17.87, lower.tail=F)
ppois(9, 10, lower.tail=F)
ppois(9, 10, lower.tail=T)
ppois(9, 18, lower.tail=F)
ppois(9, 17.87, lower.tail=F)
ppois(9, 17.87, lower.tail=T)
ppois(9, lambda=.01*17.87, lower.tail=F)
ppois(9, lambda=.01*1787, lower.tail=F)
ppois((9/1787), (1/100), lower.tail=F)
ppois((9/1787), (1/100), lower.tail=T)
ppois((10/1787), (1/100), lower.tail=F)
ppois((10/1787), (1/100), lower.tail=T)
ppois(10, 17.87, lower.tail=T)
?t.test
(-3 - 1.1)/(1.1/3)
mt <- -3; mp <- 1
n1 <- n2 <- 9
sdt <- 1.5; sdp <- 1.8
se <- sdt * sqrt(1/n1 + 1/n2)
ts <- (m2 - m1) /se
pv <- 2 * pnorm(-abs(ts))
pv
mt <- -3; mp <- 1
n1 <- n2 <- 9
sdt <- 1.5; sdp <- 1.8
se <- sdt * sqrt(1/n1 + 1/n2)
ts <- (mt - mp) /se
pv <- 2 * pnorm(-abs(ts))
pv
mt <- -3; mp <- 1
n1 <- n2 <- 9
sdt <- 1.5; sdp <- 1.8
se <- sdp * sqrt(1/n1 + 1/n2)
ts <- (mt - mp) /se
pv <- 2 * pnorm(-abs(ts))
pv
mt <- -3; mp <- 1
n1 <- n2 <- 9
sdt <- 1.5; sdp <- 1.8
se <- sdp * sqrt(1/n1 + 1/n2)
ts <- (mp - mt) /se
pv <- 2 * pnorm(-abs(ts))
pv
mt <- -3; mp <- 1
n1 <- n2 <- 9
sdt <- 1.5; sdp <- 1.8
se <- sdp * sqrt(1/n1 + 1/n2)
ts <- (mp - mt) /se
pv <- 2 * pnorm(-abs(ts))
pv
mnP <- 1100
sP <- 30
n <- 9
zP <- qnorm(c(0.025, 97.5))
muP <- mnP - zP*sP/sqrt(n)
muP
mnP <- 1100
sP <- 30
n <- 9
zP <- qnorm(c(0.025, 97.5))
mnP <- 1100
sP <- 30
n <- 9
zP <- qnorm(c(0.025, 0.975))
muP <- mnP - zP*sP/sqrt(n)
muP
qnorm(c(0.025, 0.975))
zP2 <- c(-2, 2)
muP <- mnP - zP2*sP/sqrt(n)
muP
muP <- mnP - zP2*10
muP
muP <- mnP - zP*10
muP
mnP <- 1100
sP <- 30
n <- 9
zP <- qnorm(c(0.025, 0.975))
muP <- mnP - zP*sP/sqrt(n)
muP
mnP <- 3
sP <- 1.1
n <- 100
zP <- qnorm(c(0.025, 0.975))
muP <- mnP - zP*sP/sqrt(n)
muP
mnP <- 1100
sP <- 30
n <- 9
zP <- qt(c(0.025, 0.975))
muP <- mnP - zP*sP/sqrt(n)
muP
mnP <- 1100
sP <- 30
n <- 9
zP <- qt(c(0.025, 0.975), df=8)
muP <- mnP - zP*sP/sqrt(n)
muP
library(dplyr)
library(tidyr)
df <- data.frame(x = c("a.b", "a.d", "b.c"))
df %>% extract(x, "A")
df
df %>% extract(x, c("A", "B"), "([[:alnum:]]+)\\.([[:alnum:]]+)")
extract_numeric("$1200.34")
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, stock, price, -time)
stocks %>% gather(stock, price, -time)
df %>% separate(x, c("A", "B"))
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
stocksm %>% spread(time, price)
df <- data.frame(x = c("a", "b"), y = c(3, 4), z = c(5, 6))
df
df %>% spread(x, y) %>% gather(x, y, a:b, na.rm = TRUE)
unite_(mtcars, "vs_am", c("vs","am"))
mtcars %>%
unite(vs_am, vs, am) %>%
separate(vs_am, c("vs", "am"))
?rbind_list
one <- mtcars[1:10, ]
two <- mtcars[11:32, ]
one; two
rbind_list(one, two)
rbind_all(list(one, two))
?contains
?contains()
?starts_with
by_cyl <- group_by(mtcars, cyl)
by_cyl
mtcars
group_by(mtcars, cyl)
tbl_df(by_cyl)
do(by_cyl, head(., 2))
do(by_cyl, head(., 3))
models <- by_cyl %>% do(mod = lm(mpg ~ disp, data = .))
models
summarise(models, rsq = summary(mod)$r.squared)
models %>% do(data.frame(coef = coef(.$mod)))
models %>% do(data.frame(
var = names(coef(.$mod)),
coef(summary(.$mod)))
)
models <- by_cyl %>% do(
mod_linear = lm(mpg ~ disp, data = .),
mod_quad = lm(mpg ~ poly(disp, 2), data = .)
)
models
compare <- models %>% do(aov = anova(.$mod_linear, .$mod_quad))
compare %>% summarise(p.value = aov$`Pr(>F)`)
compare <- models %>% do(aov = anova(.$mod_linear, .$mod_quad))
# compare %>% summarise(p.value = aov$`Pr(>F)`)
compare
if (require("nycflights13")) {
# You can use it to do any arbitrary computation, like fitting a linear
# model. Let's explore how carrier departure delays vary over the time
carriers <- group_by(flights, carrier)
group_size(carriers)
)
if (require("nycflights13")) {
# You can use it to do any arbitrary computation, like fitting a linear
# model. Let's explore how carrier departure delays vary over the time
carriers <- group_by(flights, carrier)
group_size(carriers)
mods <- do(carriers, mod = lm(arr_delay ~ dep_time, data = .))
mods %>% do(as.data.frame(coef(.$mod)))
mods %>% summarise(rsq = summary(mod)$r.squared)
## Not run:
# This longer example shows the progress bar in action
by_dest <- flights %>% group_by(dest) %>% filter(n() > 100)
library(mgcv)
by_dest %>% do(smooth = gam(arr_delay ~ s(dep_time) + month, data = .))
## End(Not run)
}
n = 100; x = rnorm(n); x2 = rnorm(n); x3 = rnorm(n)
y = 1 + x + x2 + x3 + rnorm(n, sd = .1)
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x ~ x2 + x3))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(ey ~ ex - 1))
coef(lm(y ~ x + x2 + x3))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(ey ~ ex - 1))
coef(lm(y ~ x + x2 + x3 - 1))
n = 100; x = rnorm(n); x2 = rnorm(n); x3 = rnorm(n)
y = 1 + x + x2 + x3 + rnorm(n, sd = .1)
ey = resid(lm(y ~ x2 + x3))
ex = resid(lm(x ~ x2 + x3))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(ey ~ ex - 1))
coef(lm(y ~ x + x2 + x3 - 1))
data(swiss)
summary(lm(Fertility ~ Agriculture + Catholic + Infant.Mortality, data=swiss))
summary(lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data=swiss))
cor(swiss)
summary(lm(Fertility ~ Agriculture, data=swiss))
lm(Fertility ~ Agriculture, data=swiss)
lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data=swiss)
summary(lm(count ~ spray - 1, data = InsectSprays))
summary(lm(count ~ spray, data = InsectSprays))
lm(count ~ spray, InsectSprays)
names(lm(count ~ spray, InsectSprays))
names(summary(lm(count ~ spray, InsectSprays)))
names(summary(lm(count ~ spray, InsectSprays)))$cov.unscaled
summary(lm(count ~ spray, InsectSprays))$cov.unscaled
summary(lm(count ~ spray, InsectSprays))$cov.unscaled[3,3]
summary(lm(count ~ spray, InsectSprays))$cov.unscaled[2,3]
summary(lm(count ~ spray, InsectSprays))$cov.unscaled[1,3]
setwd("/home/lauprebel/git/PML_CourseProject")
dir()
file.edit("PML_comparison.R")
submission <- read.csv("./pml-testing.csv")
testRT1 <- submission$raw_timestamp_part_1
a <- wled[match(testRT1, wled[, 3]), 160]
load("PML_CP.Rdata.RData")
testRT1 <- submission$raw_timestamp_part_1
a <- wled[match(testRT1, wled[, 3]), 160]
predict(model1, submission)
rf <- predict(modelrf, submission)
rf
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(rf)
